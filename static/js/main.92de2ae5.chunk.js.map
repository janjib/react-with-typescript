{"version":3,"sources":["components/List.tsx","components/AddToList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["List","people","map","person","className","src","url","name","age","note","AddToList","setPeople","useState","image","input","setInput","handleChange","e","target","value","type","placeholder","onChange","onClick","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA8BeA,EAnBgB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAgBhC,OAAO,6BAdEA,EAAOC,KAAI,SAACC,GACjB,OACE,qBAAIC,UAAU,OAAd,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,WAAWC,IAAKF,EAAOG,MACtC,6BAAKH,EAAOI,UAEd,4BAAIJ,EAAOK,MACX,mBAAGJ,UAAU,YAAb,SAA0BD,EAAOM,gB,qBCkE5BC,EA/EqB,SAAC,GAA2B,IAAzBT,EAAwB,EAAxBA,OAAQU,EAAgB,EAAhBA,UAC7C,EAA0BC,mBAAS,CACjCL,KAAM,GACNC,IAAK,GACLC,KAAM,GACNI,MAAO,KAJT,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAe,SACnBC,GAEAF,EAAS,2BACJD,GADG,kBAELG,EAAEC,OAAOX,KAAOU,EAAEC,OAAOC,UAyB9B,OACE,sBAAKf,UAAU,YAAf,UACE,uBACEgB,KAAK,OACLC,YAAY,OACZjB,UAAU,kBACVe,MAAOL,EAAMP,KACbe,SAAUN,EACVT,KAAK,SAEP,uBACEa,KAAK,SACLC,YAAY,MACZjB,UAAU,kBACVe,MAAOL,EAAMN,IACbc,SAAUN,EACVT,KAAK,QAEP,uBACEa,KAAK,OACLC,YAAY,YACZjB,UAAU,kBACVe,MAAOL,EAAMD,MACbS,SAAUN,EACVT,KAAK,UAEP,0BACEc,YAAY,QACZjB,UAAU,kBACVe,MAAOL,EAAML,KACba,SAAUN,EACVT,KAAK,SAGP,wBAAQH,UAAU,gBAAgBmB,QAvDlB,WACbT,EAAMP,MAASO,EAAMN,KAAQM,EAAMD,QAGxCF,EAAU,GAAD,mBACJV,GADI,CAEP,CACEM,KAAMO,EAAMP,KACZC,IAAKgB,SAASV,EAAMN,KACpBF,IAAKQ,EAAMD,MACXJ,KAAMK,EAAML,SAGhBM,EAAS,CACPR,KAAM,GACNC,IAAK,GACLK,MAAO,GACPJ,KAAM,OAsCN,6BC1CSgB,MAvBf,WACE,MAA4Bb,mBAA2B,CACrD,CACEL,KAAM,eACND,IAAK,yOACLE,IAAK,GACLC,KAAM,uCALV,mBAAOR,EAAP,KAAeU,EAAf,KAaA,OACE,sBAAKP,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CAAMH,OAAQA,IACd,cAAC,EAAD,CAAWA,OAAQA,EAAQU,UAAWA,QCnB7Be,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.92de2ae5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface IProps {\r\n  people: {\r\n    name: string;\r\n    age: number;\r\n    url: string;\r\n    note?: string;\r\n  }[];\r\n}\r\n\r\nconst List: React.FC<IProps> = ({ people }) => {\r\n  const renderList = (): JSX.Element[] => {\r\n    return people.map((person) => {\r\n      return (\r\n        <li className=\"List\">\r\n          <div className=\"List-header\">\r\n            <img className=\"List-img\" src={person.url} />\r\n            <h2>{person.name}</h2>\r\n          </div>\r\n          <p>{person.age}</p>\r\n          <p className=\"List-note\">{person.note}</p>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <ul>{renderList()}</ul>;\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport { IState as Props } from \"../App\";\r\n\r\ninterface IProps {\r\n  people: Props[\"people\"];\r\n  setPeople: React.Dispatch<React.SetStateAction<Props[\"people\"]>>;\r\n}\r\n\r\nconst AddToList: React.FC<IProps> = ({ people, setPeople }) => {\r\n  const [input, setInput] = useState({\r\n    name: \"\",\r\n    age: \"\",\r\n    note: \"\",\r\n    image: \"\",\r\n  });\r\n\r\n  const handleChange = (\r\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\r\n  ): void => {\r\n    setInput({\r\n      ...input,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (): void => {\r\n    if (!input.name || !input.age || !input.image) {\r\n      return;\r\n    }\r\n    setPeople([\r\n      ...people,\r\n      {\r\n        name: input.name,\r\n        age: parseInt(input.age),\r\n        url: input.image,\r\n        note: input.note,\r\n      },\r\n    ]);\r\n    setInput({\r\n      name: \"\",\r\n      age: \"\",\r\n      image: \"\",\r\n      note: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"AddToList\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Name\"\r\n        className=\"AddToList-input\"\r\n        value={input.name}\r\n        onChange={handleChange}\r\n        name=\"name\"\r\n      />\r\n      <input\r\n        type=\"number\"\r\n        placeholder=\"Age\"\r\n        className=\"AddToList-input\"\r\n        value={input.age}\r\n        onChange={handleChange}\r\n        name=\"age\"\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Image URL\"\r\n        className=\"AddToList-input\"\r\n        value={input.image}\r\n        onChange={handleChange}\r\n        name=\"image\"\r\n      />\r\n      <textarea\r\n        placeholder=\"Notes\"\r\n        className=\"AddToList-input\"\r\n        value={input.note}\r\n        onChange={handleChange}\r\n        name=\"note\"\r\n      />\r\n\r\n      <button className=\"AddToList-btn\" onClick={handleClick}>\r\n        Add to list\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddToList;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport List from \"./components/List\";\nimport AddToList from \"./components/AddToList\";\n\nexport interface IState {\n  people: {\n    name: string;\n    age: number;\n    url: string;\n    note?: string;\n  }[];\n}\n\nfunction App() {\n  const [people, setPeople] = useState<IState[\"people\"]>([\n    {\n      name: \"Lebron James\",\n      url: \"https://img.i-scmp.com/cdn-cgi/image/fit=contain,width=1098,format=auto/sites/default/files/styles/1200x800/public/d8/images/methode/2021/03/02/721acbac-7a6b-11eb-9fc3-2f3c8e08d261_image_hires_173637.jpg?itok=Z2EHId9I&v=1614677806\",\n      age: 36,\n      note: \"Allergic to stay on the same team\",\n    },\n  ]);\n\n  // people.map((person) => {\n  //   person.age;\n  // });\n\n  return (\n    <div className=\"App\">\n      <h1>Welcome to my party</h1>\n      <List people={people} />\n      <AddToList people={people} setPeople={setPeople} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}